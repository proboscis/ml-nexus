"""Test macros and scripts generated by schematics_universal for different project kinds

This test verifies that the correct macros and scripts are generated
for each type of project (UV, Rye, setup.py, etc).
"""

from pathlib import Path
from pinjected import design
from pinjected.test import injected_pytest
from ml_nexus import load_env_design
from ml_nexus.project_structure import ProjectDef, ProjectDir
from ml_nexus.storage_resolver import StaticStorageResolver
from loguru import logger

# Create storage resolver for test projects
TEST_PROJECT_ROOT = Path(__file__).parent / "dummy_projects"

_storage_resolver = StaticStorageResolver(
    {
        "test_uv": TEST_PROJECT_ROOT / "test_uv",
        "test_rye": TEST_PROJECT_ROOT / "test_rye",
        "test_setuppy": TEST_PROJECT_ROOT / "test_setuppy",
        "test_requirements": TEST_PROJECT_ROOT / "test_requirements",
        "test_source": TEST_PROJECT_ROOT / "test_source",
        "test_resource": TEST_PROJECT_ROOT / "test_resource",
    }
)

# Test design configuration
_design = load_env_design + design(
    storage_resolver=_storage_resolver, 
    logger=logger
)


# ===== Test 1: UV project macros =====
@injected_pytest(_design)
async def test_uv_project_macros(schematics_universal, logger):
    """Test that UV projects generate correct macros and scripts"""
    logger.info("Testing UV project macros and scripts")

    project = ProjectDef(dirs=[ProjectDir("test_uv", kind="uv")])
    schematic = await schematics_universal(
        target=project, base_image="python:3.11-slim"
    )

    builder = schematic.builder

    # Verify base image
    assert builder.base_image == "python:3.11-slim"

    # Verify macros exist
    assert len(builder.macros) > 0, "UV project should have macros"

    # Verify scripts contain UV commands
    scripts_str = " ".join(builder.scripts)
    assert "uv sync" in scripts_str, "UV project should have 'uv sync' command"

    logger.info(
        f"✅ UV project: {len(builder.macros)} macros, {len(builder.scripts)} scripts"
    )


# ===== Test 2: Rye project macros =====
@injected_pytest(_design)
async def test_rye_project_macros(schematics_universal, logger):
    """Test that Rye projects generate correct macros and scripts"""
    logger.info("Testing Rye project macros and scripts")

    project = ProjectDef(dirs=[ProjectDir("test_rye", kind="rye")])
    schematic = await schematics_universal(
        target=project, base_image="python:3.11-slim"
    )

    builder = schematic.builder

    # Verify base image
    assert builder.base_image == "python:3.11-slim"

    # Verify macros exist
    assert len(builder.macros) > 0, "Rye project should have macros"

    # Verify scripts contain Rye commands
    scripts_str = " ".join(builder.scripts)
    assert "rye sync" in scripts_str, "Rye project should have 'rye sync' command"

    logger.info(
        f"✅ Rye project: {len(builder.macros)} macros, {len(builder.scripts)} scripts"
    )


# ===== Test 3: Setup.py project macros =====
@injected_pytest(_design)
async def test_setuppy_project_macros(schematics_universal, logger):
    """Test that setup.py projects generate correct macros and scripts"""
    logger.info("Testing setup.py project macros and scripts")

    project = ProjectDef(dirs=[ProjectDir("test_setuppy", kind="setup.py")])
    schematic = await schematics_universal(
        target=project, base_image="python:3.11-slim", python_version="3.11"
    )

    builder = schematic.builder

    # Verify base image
    assert builder.base_image == "python:3.11-slim"

    # Verify macros exist
    assert len(builder.macros) > 0, "Setup.py project should have macros"

    # Verify scripts contain pip install
    scripts_str = " ".join(builder.scripts)
    assert "pip install" in scripts_str, (
        "Setup.py project should have 'pip install' command"
    )

    logger.info(
        f"✅ Setup.py project: {len(builder.macros)} macros, {len(builder.scripts)} scripts"
    )


# ===== Test 4: Auto-detected requirements.txt project =====
@injected_pytest(_design)
async def test_auto_requirements_project_macros(schematics_universal, logger):
    """Test that auto-detected requirements.txt projects generate correct macros"""
    logger.info("Testing auto-detected requirements.txt project")

    project = ProjectDef(dirs=[ProjectDir("test_requirements", kind="auto")])
    schematic = await schematics_universal(
        target=project, base_image="python:3.11-slim"
    )

    builder = schematic.builder

    # Verify base image
    assert builder.base_image == "python:3.11-slim"

    # Verify macros exist
    assert len(builder.macros) > 0, "Requirements project should have macros"

    # Verify scripts contain pip install
    scripts_str = " ".join(builder.scripts)
    assert "pip install" in scripts_str and "requirements.txt" in scripts_str, (
        "Requirements project should install from requirements.txt"
    )

    logger.info(
        f"✅ Requirements project: {len(builder.macros)} macros, {len(builder.scripts)} scripts"
    )


# ===== Test 5: Source project (no Python) =====
@injected_pytest(_design)
async def test_source_project_macros(schematics_universal, logger):
    """Test that source projects don't set up Python environment"""
    logger.info("Testing source project (no Python)")

    project = ProjectDef(dirs=[ProjectDir("test_source", kind="source")])
    schematic = await schematics_universal(target=project, base_image="ubuntu:22.04")

    builder = schematic.builder

    # Verify base image
    assert builder.base_image == "ubuntu:22.04"

    # Verify no Python setup scripts
    scripts_str = " ".join(builder.scripts)
    assert "python" not in scripts_str.lower(), (
        "Source project should not set up Python"
    )
    assert "pip" not in scripts_str.lower(), "Source project should not use pip"

    logger.info(
        f"✅ Source project: {len(builder.macros)} macros, {len(builder.scripts)} scripts"
    )


# ===== Test 6: Resource project =====
@injected_pytest(_design)
async def test_resource_project_macros(schematics_universal, logger):
    """Test that resource projects don't set up Python environment"""
    logger.info("Testing resource project")

    project = ProjectDef(dirs=[ProjectDir("test_resource", kind="resource")])
    schematic = await schematics_universal(target=project, base_image="ubuntu:22.04")

    builder = schematic.builder

    # Verify base image
    assert builder.base_image == "ubuntu:22.04"

    # Verify minimal setup
    logger.info(
        f"✅ Resource project: {len(builder.macros)} macros, {len(builder.scripts)} scripts"
    )


# ===== Test 7: Verify all project kinds =====
@injected_pytest(_design)
async def test_verify_all_macros(schematics_universal, logger):
    """Verify macros for all project kinds"""
    logger.info("Testing all project kinds for macro generation")

    test_cases = [
        ("UV", ProjectDir("test_uv", kind="uv"), "uv sync"),
        ("Rye", ProjectDir("test_rye", kind="rye"), "rye sync"),
        ("Setup.py", ProjectDir("test_setuppy", kind="setup.py"), "pip install"),
        (
            "Requirements",
            ProjectDir("test_requirements", kind="auto"),
            "requirements.txt",
        ),
        ("Resource", ProjectDir("test_resource", kind="resource"), None),
        ("Source", ProjectDir("test_source", kind="source"), None),
    ]

    results = []
    for name, project_dir, expected_command in test_cases:
        project = ProjectDef(dirs=[project_dir])
        schematic = await schematics_universal(
            target=project,
            base_image="python:3.11-slim" if expected_command else "ubuntu:22.04",
        )

        builder = schematic.builder
        scripts_str = " ".join(builder.scripts)

        if expected_command:
            assert expected_command in scripts_str, (
                f"{name} project should contain '{expected_command}'"
            )

        results.append(
            {
                "kind": name,
                "macros": len(builder.macros),
                "scripts": len(builder.scripts),
                "mounts": len(schematic.mount_requests),
            }
        )

        logger.info(
            f"✅ {name}: {results[-1]['macros']} macros, "
            f"{results[-1]['scripts']} scripts, {results[-1]['mounts']} mounts"
        )

    # Verify we tested all kinds
    assert len(results) == 6, "Should have tested 6 project kinds"
    logger.info("✅ All project kinds verified")


# ===== Test 8: Analyze UV schematic =====
@injected_pytest(_design)
async def test_analyze_uv_schematic(schematics_universal, logger):
    """Analyze the macros and scripts in UV schematic"""
    project = ProjectDef(dirs=[ProjectDir("test_uv", kind="uv")])
    schematic = await schematics_universal(
        target=project, base_image="python:3.11-slim"
    )
    
    builder = schematic.builder

    logger.info(f"\n{'=' * 60}")
    logger.info(f"Analysis for UV kind")
    logger.info(f"{'=' * 60}")

    logger.info(f"Base image: {builder.base_image}")
    logger.info(f"Macros count: {len(builder.macros)}")
    logger.info(f"Scripts count: {len(builder.scripts)}")
    logger.info(f"Mount requests: {len(schematic.mount_requests)}")

    # Show first few scripts
    for i, script in enumerate(builder.scripts[:3]):
        logger.info(f"Script {i}: {script[:80]}...")

    # Verify analysis results
    assert builder.base_image == "python:3.11-slim"
    assert len(builder.macros) > 0
    assert len(builder.scripts) > 0


# ===== Test 9: Analyze Rye schematic =====
@injected_pytest(_design)
async def test_analyze_rye_schematic(schematics_universal, logger):
    """Analyze the macros and scripts in Rye schematic"""
    project = ProjectDef(dirs=[ProjectDir("test_rye", kind="rye")])
    schematic = await schematics_universal(
        target=project, base_image="python:3.11-slim"
    )
    
    builder = schematic.builder

    logger.info(f"\n{'=' * 60}")
    logger.info(f"Analysis for RYE kind")
    logger.info(f"{'=' * 60}")

    logger.info(f"Base image: {builder.base_image}")
    logger.info(f"Macros count: {len(builder.macros)}")
    logger.info(f"Scripts count: {len(builder.scripts)}")
    logger.info(f"Mount requests: {len(schematic.mount_requests)}")

    # Show first few scripts
    for i, script in enumerate(builder.scripts[:3]):
        logger.info(f"Script {i}: {script[:80]}...")

    # Verify analysis results
    assert builder.base_image == "python:3.11-slim"
    assert len(builder.macros) > 0
    assert len(builder.scripts) > 0


# ===== Test 10: Analyze Setup.py schematic =====
@injected_pytest(_design)
async def test_analyze_setuppy_schematic(schematics_universal, logger):
    """Analyze the macros and scripts in Setup.py schematic"""
    project = ProjectDef(dirs=[ProjectDir("test_setuppy", kind="setup.py")])
    schematic = await schematics_universal(
        target=project, base_image="python:3.11-slim", python_version="3.11"
    )
    
    builder = schematic.builder

    logger.info(f"\n{'=' * 60}")
    logger.info(f"Analysis for SETUP.PY kind")
    logger.info(f"{'=' * 60}")

    logger.info(f"Base image: {builder.base_image}")
    logger.info(f"Macros count: {len(builder.macros)}")
    logger.info(f"Scripts count: {len(builder.scripts)}")
    logger.info(f"Mount requests: {len(schematic.mount_requests)}")

    # Show first few scripts
    for i, script in enumerate(builder.scripts[:3]):
        logger.info(f"Script {i}: {script[:80]}...")

    # Verify analysis results
    assert builder.base_image == "python:3.11-slim"
    assert len(builder.macros) > 0
    assert len(builder.scripts) > 0


# ===== Test 11: Analyze Auto (requirements.txt) schematic =====
@injected_pytest(_design)
async def test_analyze_auto_schematic(schematics_universal, logger):
    """Analyze the macros and scripts in Auto-detected requirements.txt schematic"""
    project = ProjectDef(dirs=[ProjectDir("test_requirements", kind="auto")])
    schematic = await schematics_universal(
        target=project, base_image="python:3.11-slim"
    )
    
    builder = schematic.builder

    logger.info(f"\n{'=' * 60}")
    logger.info(f"Analysis for AUTO (requirements.txt) kind")
    logger.info(f"{'=' * 60}")

    logger.info(f"Base image: {builder.base_image}")
    logger.info(f"Macros count: {len(builder.macros)}")
    logger.info(f"Scripts count: {len(builder.scripts)}")
    logger.info(f"Mount requests: {len(schematic.mount_requests)}")

    # Show first few scripts
    for i, script in enumerate(builder.scripts[:3]):
        logger.info(f"Script {i}: {script[:80]}...")

    # Verify analysis results
    assert builder.base_image == "python:3.11-slim"
    assert len(builder.macros) > 0
    assert len(builder.scripts) > 0


# ===== Test 12: Analyze Source schematic =====
@injected_pytest(_design)
async def test_analyze_source_schematic(schematics_universal, logger):
    """Analyze the macros and scripts in Source schematic"""
    project = ProjectDef(dirs=[ProjectDir("test_source", kind="source")])
    schematic = await schematics_universal(
        target=project, base_image="ubuntu:22.04"
    )
    
    builder = schematic.builder

    logger.info(f"\n{'=' * 60}")
    logger.info(f"Analysis for SOURCE kind")
    logger.info(f"{'=' * 60}")

    logger.info(f"Base image: {builder.base_image}")
    logger.info(f"Macros count: {len(builder.macros)}")
    logger.info(f"Scripts count: {len(builder.scripts)}")
    logger.info(f"Mount requests: {len(schematic.mount_requests)}")

    # Show first few scripts
    for i, script in enumerate(builder.scripts[:3]):
        logger.info(f"Script {i}: {script[:80]}...")

    # Verify analysis results
    assert builder.base_image == "ubuntu:22.04"
    # Source projects may have minimal or no macros/scripts
    

# ===== Test 13: Analyze Resource schematic =====
@injected_pytest(_design)
async def test_analyze_resource_schematic(schematics_universal, logger):
    """Analyze the macros and scripts in Resource schematic"""
    project = ProjectDef(dirs=[ProjectDir("test_resource", kind="resource")])
    schematic = await schematics_universal(
        target=project, base_image="ubuntu:22.04"
    )
    
    builder = schematic.builder

    logger.info(f"\n{'=' * 60}")
    logger.info(f"Analysis for RESOURCE kind")
    logger.info(f"{'=' * 60}")

    logger.info(f"Base image: {builder.base_image}")
    logger.info(f"Macros count: {len(builder.macros)}")
    logger.info(f"Scripts count: {len(builder.scripts)}")
    logger.info(f"Mount requests: {len(schematic.mount_requests)}")

    # Show first few scripts
    for i, script in enumerate(builder.scripts[:3]):
        logger.info(f"Script {i}: {script[:80]}...")

    # Verify analysis results
    assert builder.base_image == "ubuntu:22.04"
    # Resource projects may have minimal or no macros/scripts